{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/angelinasanna/my-sorority-bot/app/api/ask/route.js"],"sourcesContent":["// app/api/ask/route.js\nimport OpenAI from \"openai\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supa = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE,         // server-only\n  { auth: { persistSession: false } }\n);\n\nexport const dynamic = \"force-dynamic\";\n\nexport async function POST(req) {\n  try {\n    const { question } = await req.json();\n    if (!question?.trim()) {\n      return Response.json({ error: \"No question provided.\" }, { status: 400 });\n    }\n\n    // 1) embed the question\n    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    const EMBED_MODEL = process.env.EMBED_MODEL || \"text-embedding-3-small\";\n    const CHAT_MODEL  = process.env.CHAT_MODEL  || \"gpt-4o-mini\";\n\n    const qEmb = await openai.embeddings.create({\n      model: EMBED_MODEL,\n      input: question\n    });\n    const queryVec = qEmb.data[0].embedding;\n\n    // 2) fetch top matches from Supabase\n    const supa = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.SUPABASE_SERVICE_ROLE,\n      { auth: { persistSession: false } }\n    );\n\n    const { data: matches, error } = await supa.rpc(\"match_chunks\", {\n      query_embedding: queryVec,\n      match_threshold: 0.0,  // keep 0.0 at first; you can raise later\n      match_count: 5\n    });\n\n    if (error) throw new Error(\"DB search failed: \" + error.message);\n\n    const context = (matches || [])\n      .map((m, i) => `[#${i + 1} ${m.source || \"source\"}] ${m.content}`)\n      .join(\"\\n---\\n\");\n\n    // If we found nothing, bail early with a friendly nudge\n    if (!context) {\n      return Response.json({\n        answer:\n`I couldn't find this in our chapter notes yet. Try rephrasing or ask an officer to add it on /admin.`,\n        sources: []\n      });\n    }\n\n    // 3) ask GPT to answer USING ONLY the retrieved context\n    const system = `You are an Alpha Phi helper.\nUse ONLY the \"Context\" below. If something is missing, say you aren’t sure and suggest asking an officer.\nKeep answers short. Cite chunks like [#1], [#2].`;\n\n    const completion = await openai.chat.completions.create({\n      model: CHAT_MODEL,\n      temperature: 0.2,\n      max_tokens: 350,\n      messages: [\n        { role: \"system\", content: system },\n        { role: \"user\", content: `Question: ${question}\\n\\nContext:\\n${context}` }\n      ]\n    });\n\n    const answer = completion.choices?.[0]?.message?.content ?? \"Sorry, not sure.\";\n    const sources = (matches || []).map((m, i) => ({\n      n: i + 1, source: m.source, url: m.url\n    }));\n\n    return Response.json({ answer, sources });\n  } catch (err) {\n    const status = err?.status || err?.response?.status || 500;\n    const msg = err?.message || \"Server error\";\n    // graceful message for credit/rate limits\n    if (status === 429 || /quota/i.test(msg)) {\n      return Response.json(\n        { error: \"Our AI hit her budget for today—try again later or DM an officer.\" },\n        { status: 429 }\n      );\n    }\n    return Response.json({ error: msg }, { status });\n  }\n}\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AACvB;AAAA;AACA;;;AAEA,MAAM,OAAO,IAAA,yMAAY,sFAEvB,QAAQ,GAAG,CAAC,qBAAqB,EACjC;IAAE,MAAM;QAAE,gBAAgB;IAAM;AAAE;AAG7B,MAAM,UAAU;AAEhB,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QACnC,IAAI,CAAC,UAAU,QAAQ;YACrB,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,wBAAwB;QACxB,MAAM,SAAS,IAAI,mLAAM,CAAC;YAAE,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAC;QAC/D,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;QAC/C,MAAM,aAAc,QAAQ,GAAG,CAAC,UAAU,IAAK;QAE/C,MAAM,OAAO,MAAM,OAAO,UAAU,CAAC,MAAM,CAAC;YAC1C,OAAO;YACP,OAAO;QACT;QACA,MAAM,WAAW,KAAK,IAAI,CAAC,EAAE,CAAC,SAAS;QAEvC,qCAAqC;QACrC,MAAM,OAAO,IAAA,yMAAY,sFAEvB,QAAQ,GAAG,CAAC,qBAAqB,EACjC;YAAE,MAAM;gBAAE,gBAAgB;YAAM;QAAE;QAGpC,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,KAAK,GAAG,CAAC,gBAAgB;YAC9D,iBAAiB;YACjB,iBAAiB;YACjB,aAAa;QACf;QAEA,IAAI,OAAO,MAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO;QAE/D,MAAM,UAAU,CAAC,WAAW,EAAE,EAC3B,GAAG,CAAC,CAAC,GAAG,IAAM,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,IAAI,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,EAChE,IAAI,CAAC;QAER,wDAAwD;QACxD,IAAI,CAAC,SAAS;YACZ,OAAO,SAAS,IAAI,CAAC;gBACnB,QACR,CAAC,oGAAoG,CAAC;gBAC9F,SAAS,EAAE;YACb;QACF;QAEA,wDAAwD;QACxD,MAAM,SAAS,CAAC;;gDAE4B,CAAC;QAE7C,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,aAAa;YACb,YAAY;YACZ,UAAU;gBACR;oBAAE,MAAM;oBAAU,SAAS;gBAAO;gBAClC;oBAAE,MAAM;oBAAQ,SAAS,CAAC,UAAU,EAAE,SAAS,cAAc,EAAE,SAAS;gBAAC;aAC1E;QACH;QAEA,MAAM,SAAS,WAAW,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,WAAW;QAC5D,MAAM,UAAU,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,IAAM,CAAC;gBAC7C,GAAG,IAAI;gBAAG,QAAQ,EAAE,MAAM;gBAAE,KAAK,EAAE,GAAG;YACxC,CAAC;QAED,OAAO,SAAS,IAAI,CAAC;YAAE;YAAQ;QAAQ;IACzC,EAAE,OAAO,KAAK;QACZ,MAAM,SAAS,KAAK,UAAU,KAAK,UAAU,UAAU;QACvD,MAAM,MAAM,KAAK,WAAW;QAC5B,0CAA0C;QAC1C,IAAI,WAAW,OAAO,SAAS,IAAI,CAAC,MAAM;YACxC,OAAO,SAAS,IAAI,CAClB;gBAAE,OAAO;YAAoE,GAC7E;gBAAE,QAAQ;YAAI;QAElB;QACA,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAI,GAAG;YAAE;QAAO;IAChD;AACF","debugId":null}}]
}